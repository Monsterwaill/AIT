    public static final ResourceLocation MINT_LM_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/mint_exterior_emission.png");
    public static final ResourceLocation CORAL_LM_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/coral_tardis_emission.png");
    public static final ResourceLocation POSTER_LM_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/secret_smith_poster_box_emission.png");
    public static final ResourceLocation BAKER_LM_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/baker_tardis_emission.png");
    public static final ResourceLocation NUKA_COLA_LM_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/nuka_cola_exterior_emission.png");
    public static final ResourceLocation SIEGE_MODE_LM_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/siege_mode_emission.png");
    public static final ResourceLocation TRON_LM_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/tron_exterior_emission.png");
    public static final ResourceLocation CUSHING_BASE_LM_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/cushing_exterior_emission.png");
    public static final ResourceLocation CUSHING_BASE_LM_NW_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/cushing_exterior_emission_no_windows.png");
    public static final ResourceLocation CLASSIC_LM_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/classic_exterior_emission.png");
    public static final ResourceLocation HARTNELL_LM_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/hartnell_exterior_emission.png");
    public static final ResourceLocation HUDOLIN_LM_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/hudolin_exterior_emission.png");
    public static final ResourceLocation TX3_LM_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/tx3_capsule_emission.png");
    public static final ResourceLocation TARDIM_LM_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/tardim_exterior_emission.png");
    public static final ResourceLocation SHALKA_LM_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/shalka_exterior_emission.png");
    public static final ResourceLocation BOOTH_LM_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/booth_exterior_emission.png");
    public static final ResourceLocation FALLOUT_SHELTER_LM_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/fallout_shelter_exterior_emission.png");
    public static final ResourceLocation RANI_LM_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/rani_exterior_emission.png");

    //Holiday stuff :)
    public static final ResourceLocation CHRISTMAS_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/holidays/basic_exterior_christmas.png");
    public static final ResourceLocation CHRISTMAS_MINT_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/holidays/mint_exterior_christmas.png");

    //Snow Biome Specific
    public static final ResourceLocation SNOW_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/biomes/snow/basic_exterior_snow.png");
    public static final ResourceLocation SNOW_MINT_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/biomes/snow/mint_exterior_snow.png");

    //Sand Biome Specific
    public static final ResourceLocation SAND_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/biomes/sand/basic_exterior_sand.png");
    public static final ResourceLocation SAND_MINT_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/biomes/sand/mint_exterior_sand.png");
    /*//Outlines
    public static final ResourceLocation TX3_OUTLINE_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/tx3_outline.png");*/

    public static final ResourceLocation POSTER_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/secret_smith_poster_box.png");
    public static final ResourceLocation MINT_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/mint_exterior.png");
    public static final ResourceLocation CORAL_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/coral_exterior.png");
    public static final ResourceLocation BAKER_LOCATION  = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/baker_exterior.png");
    public static final ResourceLocation TT40_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/type_40_tt_capsule_exterior.png");
    public static final ResourceLocation HELLBENT_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/tt_capsule_exterior.png");
    public static final ResourceLocation NUKA_COLA_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/nuka_cola_exterior.png");
    public static final ResourceLocation SIEGE_MODE_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/siege_mode.png");
    public static final ResourceLocation TRON_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/tron_exterior.png");
    public static final ResourceLocation CUSHING_BASE_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/cushing_exterior.png");
    public static final ResourceLocation CLASSIC_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/classic_exterior.png");
    public static final ResourceLocation HARTNELL_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/hartnell_exterior.png");
    public static final ResourceLocation HUDOLIN_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/hudolin_exterior.png");
    public static final ResourceLocation TX3_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/tx3_capsule.png");
    public static final ResourceLocation TARDIM_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/tardim_exterior.png");
    public static final ResourceLocation SHALKA_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/shalka_exterior.png");
    public static final ResourceLocation BOOTH_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/booth_exterior.png");
    public static final ResourceLocation STEVE_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/steve.png");
    public static final ResourceLocation FALLOUT_SHELTER_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/fallout_shelter_exterior.png");
    public static final ResourceLocation RANI_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/rani_exterior.png");
    public static final ResourceLocation CLOCK_LOCATION = new ResourceLocation(AIT.MOD_ID, "textures/exteriors/clock_exterior.png");


    protected static final RenderState.CullState CULL = new RenderState.CullState(true);

    public void coralText(MatrixStack stack, IRenderTypeBuffer Buffer, int light) {
        stack.pushPose();
        stack.translate(0.925f, 2.6f, -0.30f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(180.0f));
        FontRenderer fontRenderer = this.rendererDispatcher.getFont();
        IReorderingProcessor irp = new StringTextComponent("POLICE -=- BOX").getVisualOrderText();
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(1.30f, 2.6f, 0.925f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(-90.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(-0.30f, 2.6f, 0.0900f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(90.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(0.09f, 2.6f, 1.30f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
    }

    public void hudolinText(MatrixStack stack, IRenderTypeBuffer Buffer, int light) {
        stack.pushPose();
        stack.translate(0.925f, 2.68f, -0.33f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(180.0f));
        FontRenderer fontRenderer = this.rendererDispatcher.getFont();
        IReorderingProcessor irp = new StringTextComponent("POLICE -=- BOX").getVisualOrderText();
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(1.33f, 2.68f, 0.925f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(-90.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(-0.33f, 2.68f, 0.0900f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(90.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(0.09f, 2.68f, 1.33f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
    }

    public void cushingText(MatrixStack stack, IRenderTypeBuffer Buffer, int light) {
        stack.pushPose();
        stack.translate(0.925f, 2.825f, -0.375f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(180.0f));
        FontRenderer fontRenderer = this.rendererDispatcher.getFont();
        IReorderingProcessor irp = new StringTextComponent("POLICE -=- BOX").getVisualOrderText();
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(1.375f, 2.825f, 0.925f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(-90.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(-0.375f, 2.825f, 0.0900f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(90.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(0.09f, 2.825f, 1.375f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
    }

    public void classicText(MatrixStack stack, IRenderTypeBuffer Buffer, int light) {
        stack.pushPose();
        stack.translate(0.925f, 2.475f, -0.28f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(180.0f));
        FontRenderer fontRenderer = this.rendererDispatcher.getFont();
        IReorderingProcessor irp = new StringTextComponent("POLICE === BOX").getVisualOrderText();
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(1.28f, 2.475f, 0.925f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(-90.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(-0.28f, 2.475f, 0.09f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(90.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(0.09f, 2.475f, 1.28f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
    }

    public void hartnellText(MatrixStack stack, IRenderTypeBuffer Buffer, int light) {
        stack.pushPose();
        stack.translate(0.925f, 2.6775f, -0.28f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(180.0f));
        FontRenderer fontRenderer = this.rendererDispatcher.getFont();
        IReorderingProcessor irp = new StringTextComponent("POLICE -=- BOX").getVisualOrderText();
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(1.28f, 2.6775f, 0.925f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(-90.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(-0.28f, 2.6775f, 0.0900f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(90.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(0.09f, 2.6775f, 1.28f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
    }

    public void BakerText(MatrixStack stack, IRenderTypeBuffer Buffer, int light) {
        stack.pushPose();
        stack.translate(0.925f, 2.475f, -0.28f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(180.0f));
        FontRenderer fontRenderer = this.rendererDispatcher.getFont();
        IReorderingProcessor irp = new StringTextComponent("POLICE -=- BOX").getVisualOrderText();
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(1.28f, 2.475f, 0.925f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(-90.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(-0.28f, 2.475f, 0.09f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(90.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(0.09f, 2.475f, 1.28f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
    }

    public void shalkaText(MatrixStack stack, IRenderTypeBuffer Buffer, int light) {
        stack.pushPose();
        stack.translate(0.925f, 2.88f, -0.28f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(180.0f));
        FontRenderer fontRenderer = this.rendererDispatcher.getFont();
        IReorderingProcessor irp = new StringTextComponent("POLICE -=- BOX").getVisualOrderText();
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(1.28f, 2.88f, 0.925f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(-90.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(-0.28f, 2.88f, 0.0900f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(90.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(0.09f, 2.88f, 1.28f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 16777215, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
    }

    public void boothText(MatrixStack stack, IRenderTypeBuffer Buffer, int light) {
        stack.pushPose();
        stack.translate(0.975f, 2.93f, -0.18f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(180.0f));
        FontRenderer fontRenderer = this.rendererDispatcher.getFont();
        IReorderingProcessor irp = new StringTextComponent("T E L E P H O N E").getVisualOrderText();
        fontRenderer.drawInBatch(irp, -5, 5, 0, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(1.18f, 2.93f, 0.975f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(-90.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 0, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(-0.18f, 2.93f, 0.04f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        stack.mulPose(Vector3f.YP.rotationDegrees(90.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 0, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
        stack.pushPose();
        stack.translate(0.04f, 2.93f, 1.18f);
        stack.scale(0.0125f, 0.0125f, 0.0125f);
        stack.mulPose(Vector3f.XP.rotationDegrees(180.0f));
        fontRenderer.drawInBatch(irp, -5, 5, 0, false, stack.last().pose(), Buffer, false, 0, maxLight);
        stack.popPose();
    }
