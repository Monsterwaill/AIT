buildscript {
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'

    id 'com.diffplug.spotless' version '6.17.0'

    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1+'
}

apply plugin: 'org.spongepowered.mixin'

version = project.version

group = project.group
archivesBaseName = project.name

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    mappings channel: 'parchment', version: '2022.03.06-1.16.5'

    // makeObfSourceJar = false
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    mixin {
        add sourceSets.main, "${project.name}.refmap.json"
        config "ait.mixins.json"
    }

    runs {
        client {
            workingDirectory 'run'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            arg "-mixin.config=ait.mixins.json"

            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                ait {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory 'run'

            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                ait {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory 'run'

            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the mod id for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'ait', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                ait {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.35' // Specify the version of Minecraft to use.
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor' // Mixin's annotation processor.

    // Other dependencies
    implementation fg.deobf("curse.maven:immersive-portals-for-forge-355440:3562072")
}

mixin {
    add sourceSets.main, "ait.refmap.json"
}

// Spotless, makes sure that code's formatting is up to standards.
compileJava.dependsOn 'spotlessApply'

spotless {
    format 'misc', {
        target '*.gradle', '*.md', '.gitignore'

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }

    java {
        removeUnusedImports()
        palantirJavaFormat()

        trimTrailingWhitespace()
        formatAnnotations()
        endWithNewline()
    }
}


// Jar's manifest and reobfuscation.
jar.finalizedBy 'reobfJar'

jar {
    manifest {
        attributes([
                "Specification-Title"     : "AIT",
                "Specification-Vendor"    : "MDT",
                "Specification-Version"   : "${archiveVersion}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${archiveVersion}",
                "Implementation-Vendor"   : "MDT",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "ait.mixins.json"
        ])
    }
}


publishing {
    publications {
        //noinspection GroovyAssignabilityCheck
        mavenJava(MavenPublication) {
            //noinspection GroovyAssignabilityCheck
            artifact jar
        }
    }

    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
